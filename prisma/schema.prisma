generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  username              String?   @unique
  email                 String    @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  role                  UserRole  @default(USER)
  onboardingCompleted   Boolean   @default(false)
  bio                   String?
  isCommunityMember     Boolean   @default(false)
  userType              String?
  referralSource        String?
  otherReferralSource   String?
  socialLinks           String?
  expertise             String?
  subscriptionId        String?
  currentPeriodEnd      DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accounts              Account[]
  sessions              Session[]
  apiKeys               ApiKey[]
  products              Product[]

  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum UserRole {
  USER
  EXPERT
  ADMIN
}

// Product-related models
model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  logo        String?
  website     String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([name])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([name])
  @@index([slug])
}

model Product {
  id              String    @id @default(cuid())
  name            String
  sku             String    @unique
  description     String?
  image           String?
  productUrl      String?
  cost            Decimal   @db.Decimal(10, 2)
  price           Decimal   @db.Decimal(10, 2)
  currency        String    @default("EUR")
  minPrice        Decimal?  @db.Decimal(10, 2)
  maxPrice        Decimal?  @db.Decimal(10, 2)
  margin          Decimal?  @db.Decimal(5, 2)
  stock           Int?      @default(0)
  status          ProductStatus @default(ACTIVE)
  featured        Boolean   @default(false)
  channel         String?
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  brandId         String?
  brand           Brand?    @relation(fields: [brandId], references: [id])
  triggeredRule   String?
  lastUpdated     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  competitors     Competitor[]
  priceHistory    PriceHistory[]
  productImages   ProductImage[]

  @@index([name])
  @@index([sku])
  @@index([status])
  @@index([featured])
  @@index([channel])
  @@index([brandId])
  @@index([categoryId])
  @@index([userId])
  @@index([createdAt])
}

model Competitor {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String
  url         String?
  cheapest    Decimal   @db.Decimal(10, 2)
  avg         Decimal   @db.Decimal(10, 2)
  highest     Decimal   @db.Decimal(10, 2)
  cheapestColor String  @default("gray")
  lastChecked DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
  @@index([name])
}

model PriceHistory {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  price     Decimal  @db.Decimal(10, 2)
  cost      Decimal? @db.Decimal(10, 2)
  currency  String   @default("EUR")
  source    String?  // "manual", "api", "scraper"
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([createdAt])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  alt       String?
  order     Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([isPrimary])
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}